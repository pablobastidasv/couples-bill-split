name: Testing

on:
  push:
    tags-ignore:
      - '**'
    branches:
      - '**'

jobs:
  test:
    name: Analize and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
      - name: Setup Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: stable
      - name: Flutter version
        run: flutter --version
      - name: Cache pub dependencies
        uses: actions/cache@v2
        with:
          path: ${{ env.FLUTTER_HOME }}/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: ${{ runner.os }}-pub-
      - name: Download pub dependencies
        run: flutter pub get
      - name: Run build_runner
        run: flutter pub run build_runner build --delete-conflicting-outputs
      - name: Run analyzer
        run: flutter analyze
      - name: Run tests
        run: flutter test

  # job responsible for running Flutter tests on iOS devices
  ios:
    name: Integration test on iOS
    # Creates a build matrix for your jobs. You can define different variations of an environment to run each job
    strategy:
      matrix:
        device:
          # The available simulators are listed by the "xcrun xctrace list devices" command
          - "iPhone 14" # the name of the simulator could be different depending on the macos version you are using
          - "iPhone 15" # the name of the simulator could be different depending on the macos version you are using
      # if one of the jobs in the matrix expansion fails, the rest of the jobs will be cancelled
      fail-fast: true
    runs-on: macos-14 # or macos-latest if you prefer, but be aware that the available simulators could be different if you run a different version
    steps:
      - name: "List all simulators"
        run: "xcrun xctrace list devices"
      - name: "Start Simulator"
        uses: futureware-tech/simulator-action@v3
        with:
          model: "${{ matrix.device }}"
      - uses: actions/checkout@v4
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Flutter version
        run: flutter --version
      - name: Install Flutter dependencies
        run: flutter pub get
      - name: Run integration tests
        run: flutter test integration_test --verbose

  # job responsible for running Flutter tests on Android devices
  android:
    runs-on: ubuntu-latest
    name: Integration test on Android
    strategy:
      matrix:
        api-level:
          - 34
          # you can add more API level if you want to run your tests on different API
      fail-fast: true
    steps:
      - uses: actions/checkout@v4
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      - name: Setup Java
        uses: actions/setup-java@v1
        with:
          distribution: 'temurin' # See 'Supported distributions' for available options
          java-version: '17'
      - name: Setup Flutter SDK
        uses: subosito/flutter-action@v2
        with:
          channel: stable
      - name: Flutter version
        run: flutter --version
      - name: Install Flutter dependencies
        run: flutter pub get

#      - name: AVD cache
#        uses: actions/cache@v4
#        id: avd-cache
#        with:
#          path: |
#            ~/.android/avd/*
#            ~/.android/adb*
#          key: avd-${{ matrix.api-level }}
#      - name: create AVD and generate snapshot for caching
#        if: steps.avd-cache.outputs.cache-hit != 'true'
#        uses: reactivecircus/android-emulator-runner@v2
#        with:
#          api-level: ${{ matrix.api-level }}
#          force-avd-creation: false
#          emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
#          disable-animations: false
#          script: echo "Generated AVD snapshot for caching."
      - name: Run integration tests
        # more info on https://github.com/ReactiveCircus/android-emulator-runner
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: ${{ matrix.api-level }}
          arch: x86_64
#          emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
          script: flutter test integration_test
